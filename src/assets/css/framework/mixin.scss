@use 'sass:map';
@use 'rules' as rules;

@keyframes rotation {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes curtain-animation {
  0% {
    clip-path: polygon(100% 100%, 100% 100%, 100% 100%);
  }
  100% {
    clip-path: polygon(100% 100%, -200% 100%, 100% -200%);
  }
}

@keyframes ripple {
  0% {
    top: 15px;
    left: 15px;
    width: 0;
    height: 0;
    opacity: 0;
  }
  4.9% {
    top: 15px;
    left: 15px;
    width: 0;
    height: 0;
    opacity: 0;
  }
  5% {
    top: 15px;
    left: 15px;
    width: 0;
    height: 0;
    opacity: 1;
  }
  100% {
    top: 0;
    left: 0;
    width: 30px;
    height: 30px;
    opacity: 0;
  }
}

@keyframes l3 {
  to {
    transform: rotate(1turn);
  }
}

@keyframes spin-all {
  0% {
    transform: rotate(0deg) scale(0.65);
  }
  100% {
    transform: rotate(360deg) scale(0.65);
  }
}

@keyframes spin-top {
  0% {
    transform: rotate(-45deg);
  }
  100% {
    transform: rotate(315deg);
  }
}

@keyframes spin-bot {
  0%,
  35% {
    transform: rotate(0deg);
  }
  80%,
  100% {
    transform: rotate(-360deg);
  }
}

@keyframes spin-left {
  0%,
  35% {
    transform: rotate(175deg);
  }
  80%,
  100% {
    transform: rotate(535deg);
  }
}

@keyframes spin-last {
  0%,
  10% {
    transform: rotate(-280deg);
  }
  90%,
  100% {
    transform: rotate(-640deg);
  }
}

@mixin grid-row-layout($rowFrame, $gap) {
  display: grid;
  grid-template-rows: $rowFrame;
  @if $gap != unset {
    grid-gap: $gap;
  }
}

@mixin grid-column-layout($columnFrame, $gap) {
  display: grid;
  grid-template-columns: $columnFrame;
  @if $gap != unset {
    grid-gap: $gap;
  }
}

@mixin flex-layout($flex, $justify, $itemsAlign, $gap) {
  display: $flex;
  @if $justify != unset {
    justify-content: $justify;
  }
  @if $itemsAlign != unset {
    align-items: $itemsAlign;
  }
  @if $gap != unset {
    gap: $gap;
  }
}

@mixin flex-direction($direction) {
  display: flex;
  flex-direction: $direction;
}

@mixin font-family($family, $size) {
  font-family: $family, sans-serif;
  font-size: $size;
}

@mixin remove-native-focus {
  &:focus,
  &:active,
  &:focus-visible {
    box-shadow: none;
    border: 0;
    outline: 0;
  }
}

@mixin remove-list-style {
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin font-style($size, $color, $lineHeight: 1.4) {
  font-size: map.get(rules.$textSizes, $size);
  @if $lineHeight == unset {
    line-height: calc(map.get(rules.$textSizes, $size) * 1.4);
  } @else {
    line-height: $lineHeight;
  }
  @if $color {
    color: map.get(rules.$colors, $color);
  }
}

@mixin grid-gap($gap) {
  display: grid;
  @if ($gap != unset) {
    grid-gap: $gap;
  }
}

@mixin thin-scrollbar(
  $thumbColor,
  $thumbHoverColor,
  $barColor,
  $width,
  $radius
) {
  scrollbar-width: thin;
  scrollbar-color: $thumbColor $barColor;
  &::-webkit-scrollbar {
    width: $width;
    transition: width 0.25s ease-in-out;
    &:hover {
      width: calc(#{$width} * 1.25);
    }
  }
  &::-webkit-scrollbar-thumb {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background: $thumbColor;
    transition: all 0.25s ease-in-out;
    &:hover {
      background: $thumbHoverColor;
    }
  }
  &::-webkit-scrollbar-track {
    background: $barColor;
  }
}

@mixin button($size, $color, $backgroundColor) {
  font-size: $size;
  color: $color;
  background: $backgroundColor;
  padding: 15px;
  text-align: center;
  text-transform: uppercase;
  display: inline-block;
  border-radius: rules.$defaultRadius;
}

@mixin outline-focus($color, $offset, $type) {
  &:focus {
    outline: 1px $type $color;
    outline-offset: $offset;
  }
}

@mixin outline-focus-shadow($color) {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 1px $color inset;
  }
}

@mixin outline-focus-text-color($color) {
  &:focus {
    outline: none;

    * {
      color: $color;
    }
  }
}

@mixin responsive-iframe {
  position: relative;
  padding-bottom: 56.25%;
  height: 0;
  overflow: hidden;
  iframe {
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
  }
}

@mixin hide-scrollbar {
  &::-webkit-scrollbar {
    display: none;
  }
  scrollbar-width: none;
}

@mixin dropdown-arrow {
  &:after {
    content: '';
    border: solid map.get(rules.$colors, 'gray-800');
    border-width: 0 1px 1px 0;
    display: inline-block;
    padding: 3px;
    rotate: 45deg;
    position: relative;
    left: 2px;
    bottom: 1px;
  }
  &.active {
    &:after {
      rotate: -135deg;
      border-color: map.get(rules.$colors, 'gray-200');
      top: 3px;
    }
  }
}

@mixin footer-dropdown($selectWidth, $optionsWidth) {
  &__select {
    align-items: center;
    position: relative;
    cursor: pointer;
    @include dropdown-arrow;
    font-size: map.get(rules.$textSizes, '13');
    user-select: none;
    width: $selectWidth;
  }
  &__options {
    width: $optionsWidth;
  }
  &__option {
    padding: 5px 15px;
    height: 30px;
    display: grid;
    align-items: center;
    cursor: pointer;
    &:not(&:last-of-type) {
      border-bottom: 1px solid map.get(rules.$colors, 'gray-100');
    }
  }
}

@mixin link-hover {
  color: map.get(rules.$colors, 'gray-800');
  &:hover {
    color: map.get(rules.$colors, 'gray-600');
    svg {
      * {
        stroke: map.get(rules.$colors, 'gray-600');
      }
    }
  }
}

@mixin shorten-text($lines) {
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
}

@mixin switch-button {
  background-color: map.get(rules.$colors, 'gray-400');
  @include font-style('14', 'white');
  cursor: pointer;
  height: 20px;
  width: 20px;
  border-radius: rules.$formRadius;
  display: flex;
  justify-content: center;
  align-content: center;
  font-weight: 500;
  line-height: 1.2;
  &.active {
    background-color: map.get(rules.$colors, 'gray-600');
    color: map.get(rules.$colors, 'gray-800');
  }
}

@mixin modal {
  background-color: map.get(rules.$colors, 'white');
  border: 0.5px solid rgba(map.get(rules.$colors, 'gray-400'), 0.2);
  box-shadow: 0 2px 5px 0 rgba(map.get(rules.$colors, 'gray-400'), 0.2);
  z-index: 100;
}

@mixin button-loader($color) {
  width: 18px;
  height: 18px;
  border: 3px solid map.get(rules.$colors, $color);
  border-bottom-color: transparent;
  border-radius: 50%;
  display: inline-block;
  box-sizing: border-box;
  animation: rotation 1s linear infinite;
}

@mixin input-focused {
  &:focus,
  &:focus-within,
  &:active {
    outline: none !important;
    border-color: map.get(rules.$colors, 'gray-400');
    box-shadow: unset;
  }
}

@mixin section-container {
  background-color: map.get(rules.$colors, 'white');
  box-shadow: 0 1px 15px 1px rgba(map.get(rules.$colors, 'black'), 0.08);
}

@mixin animate-button {
  animation-name: curtain-animation;
  animation-duration: 800ms;
  animation-delay: 400ms;
  animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
  clip-path: polygon(100% 100%, -200% 100%, 100% -200%);
  animation-fill-mode: backwards;
}

@mixin active-state($position, $image, $backgroundColor) {
  background-color: $backgroundColor;
  background-image: $image;
  background-size: 400%;
  border-radius: rules.$defaultRadius;
  background-position: $position;
  transition: background-position 1s cubic-bezier(0.22, 1, 0.36, 1) 0s;
  box-shadow:
    rgba(map.get(rules.$colors, 'black'), 0.1) 0 4px 6px -1px,
    rgba(map.get(rules.$colors, 'black'), 0.1) 0 2px 4px -2px;
}

@mixin spinning-loader($color, $size) {
  width: $size;
  height: $size;
  position: absolute;
  border-radius: 100vh;
  display: inline-block;
  border-top: 3px solid map.get(rules.$colors, $color);
  border-right: 3px solid transparent;
  box-sizing: border-box;
  animation: rotation 1s linear infinite;
}

@mixin tooltip {
  display: none;
  position: absolute;
  bottom: calc(100% + calc(#{rules.$defaultPadding} / 2));
  padding: calc(#{rules.$defaultPadding} / 2) rules.$defaultPadding;
  border-radius: rules.$defaultRem;
  background-color: map.get(rules.$colors, 'black');
  @include font-style('13', 'white');
  width: max-content;
  z-index: 200;
  &:after {
    content: '';
    display: block;
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 5px solid map.get(rules.$colors, 'black');
    position: absolute;
    bottom: -4px;
  }
}
