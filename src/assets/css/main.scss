@use 'sass:map';
@use 'framework' as framework;

/*Fonts*/
@font-face {
  font-family: NeueMontreal;
  src: url('../fonts/ppneuemontreal-thin.woff');
  font-weight: 300;
  font-display: swap;
}

@font-face {
  font-family: NeueMontreal;
  src: url('../fonts/ppneuemontreal-book.woff');
  font-weight: 400;
  font-display: swap;
}

@font-face {
  font-family: NeueMontreal;
  src: url('../fonts/ppneuemontreal-medium.woff');
  font-weight: 500;
  font-display: swap;
}

@font-face {
  font-family: NeueMontreal;
  src: url('../fonts/ppneuemontreal-bold.woff');
  font-weight: 700;
  font-display: swap;
}

@keyframes show-up {
  0% {
    scale: 0.5;
    opacity: 0.5;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}

@keyframes modal-show-up {
  0% {
    scale: 0.8;
    opacity: 0.5;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}

*,
::before,
::after {
  box-sizing: border-box;
}

a {
  text-decoration: none;
  color: var(--theme-color);
}

h1,
h2,
h3,
h4,
h5,
p {
  font-weight: 400;
  margin: unset;
}

html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
  background-color: map.get(framework.$colors, 'white');
  @include framework.font-style('default', 'primary');
  line-height: 1;
  font-family: 'NeueMontreal', sans-serif;
}

button,
input,
textarea,
select,
option {
  font-family: 'NeueMontreal', sans-serif;
}

button {
  border: unset;
  outline: unset;
  background: none;
  cursor: pointer;
  padding: unset;
  @include framework.font-style('12', 'primary');
}

.button {
  &__default {
    border-radius: 100vh;
    background-color: map.get(framework.$colors, 'gray-800');
    @include framework.font-style('12', 'gray-50');
    padding: 10px calc(#{framework.$defaultPadding} * 0.75);
    font-weight: 500;
    position: relative;
  }
}

header {
  display: flex;
  justify-content: center;
  position: relative;
  .header {
    &__wrapper {
      padding: calc(#{framework.$defaultPadding} / 2)
        calc(#{framework.$defaultPadding} * 3);
      width: min(1300px, 100%);
      nav {
        @include framework.flex-layout(
          flex,
          space-between,
          center,
          framework.$defaultGridGap
        );
      }
      &--connect {
        .button {
          &__connect {
            min-width: 192px;
            display: flex;
            position: relative;
            justify-content: center;
            span {
              transition: color 0.2s ease;
            }
            &.connected {
              span {
                color: map.get(framework.$colors, 'green-200');
              }
              svg {
                animation-name: show-up;
                animation-duration: 200ms;
                animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
                animation-fill-mode: forwards;
              }
            }
            &--icon {
              position: absolute;
              left: 12px;
            }
          }
        }
      }
    }
  }
}

main {
  &.naka {
    display: flex;
    justify-content: center;
    padding: calc(#{framework.$defaultPadding} * 6)
      calc(#{framework.$defaultPadding} * 1.5) 0;
    .naka {
      &__wrap {
        width: min(1300px, 100%);
      }
    }
  }
}

.modal {
  &__wrap {
    display: grid;
    justify-items: center;
    align-items: center;
    height: 100vh;
    width: 100%;
    position: fixed;
    z-index: 100;
    padding: framework.$defaultPadding;
  }
  &__backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(5px);
    background: rgba(map.get(framework.$colors, 'white'), 0.75);
  }
  &__box {
    position: relative;
    border-radius: calc(#{framework.$defaultRem} * 2);
    box-shadow: 0 4px 24px 0 rgba(map.get(framework.$colors, 'gray-200'), 1);
    width: 100%;
    max-width: 350px;
    background: map.get(framework.$colors, 'white');
    padding: calc(#{framework.$defaultPadding} * 1.5);
    animation-name: modal-show-up;
    animation-duration: 200ms;
    animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
    animation-fill-mode: forwards;
  }
  &__close {
    width: 32px;
    height: 32px;
    @include framework.flex-layout(flex, center, center, unset);
    position: absolute;
    top: 12px;
    right: 12px;
    color: map.get(framework.$colors, 'gray-400');
  }
}

.Toastify {
  .Toastify {
    &__toast-container {
      width: 100%;
      max-width: 300px;
    }
    &__toast {
      &--info {
        &.Toastify {
          &__toast-theme {
            &--dark {
              border-radius: 100vh;
            }
          }
        }
      }
    }
  }
}

.toast {
  &__wrap {
    .Toastify {
      &__toast {
        &-icon {
          &[data-testid='toast-icon-info'] {
            svg {
              fill: map.get(framework.$colors, 'white');
            }
          }
        }
      }
      &__close-button {
        display: none;
      }
      &__toast-body {
        @include framework.grid-column-layout(
          1fr auto,
          calc(#{framework.$defaultGridGap} / 2)
        );
        padding-left: 30px;
      }
      &__toast-icon {
        grid-column: 2/3;
        grid-row: 1/2;
      }
      [data-testid='toast-content'] {
        grid-column: 1/2;
        grid-row: 1/2;
      }
    }
  }
}

@media screen and (max-width: 575px) {
  main {
    &.naka {
      padding-top: framework.$defaultPadding;
      padding-bottom: framework.$defaultPadding;
    }
  }
  header {
    .header {
      &__wrapper {
        padding: framework.$defaultPadding
          calc(#{framework.$defaultPadding} * 1.5);
        nav {
          justify-items: center;
          @include framework.grid-column-layout(1fr auto, unset);
          .nav {
            &__logo {
              grid-column: 1 / 3;
              grid-row: 1 / 2;
            }
          }
        }
        &--connect {
          grid-column: 2 / 3;
          grid-row: 1 / 2;
          .button {
            &__connect {
              min-width: unset;
              width: 36px;
              height: 36px;
              padding: unset;
              align-items: center;
              &--icon {
                position: relative;
                left: unset;
              }
              span {
                display: none;
              }
            }
          }
        }
      }
    }
  }
}
